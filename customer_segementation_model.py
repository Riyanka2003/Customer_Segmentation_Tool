# -*- coding: utf-8 -*-
"""Customer_segementation_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11gio5jSwGdSr9t4gsGOBiY-f0hOuXRtN
"""

from google.colab import files
uploaded = files.upload()
# Now select the file: customer_data.csv

import pandas as pd, numpy as np
import matplotlib.pyplot as plt, seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

df = pd.read_csv("customer_data.csv")
df.head()

# ðŸ“Œ Step 2: KMeans Clustering
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df)
kmeans = KMeans(n_clusters=4, random_state=42)
df['cluster'] = kmeans.fit_predict(X_scaled)
df.head()

# ðŸ“Œ Step 3: PCA for Visualization
pca = PCA(n_components=2)
components = pca.fit_transform(X_scaled)
df['pca1'], df['pca2'] = components[:, 0], components[:, 1]

# Plotting
plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='pca1', y='pca2', hue='cluster', palette='Set2')
plt.title("ðŸ“Š Customer Segments (PCA Reduced)")
plt.grid(True)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# !pip install streamlit
# !pip install pyngrok
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from sklearn.preprocessing import StandardScaler
# from sklearn.cluster import KMeans
# 
# @st.cache_data
# def load_model_and_data():
#     data = pd.read_csv("customer_data.csv")
#     scaler = StandardScaler()
#     X_scaled = scaler.fit_transform(data)
#     model = KMeans(n_clusters=4, random_state=42)
#     model.fit(X_scaled)
#     return scaler, model
# 
# scaler, kmeans_model = load_model_and_data()
# 
# # Streamlit UI
# st.title("ðŸ§  Customer Segmentation App")
# st.write("Input customer behavior data to determine the segment they belong to.")
# 
# # Input sliders
# recency = st.slider("Recency (days since last purchase)", 1, 365, 90)
# frequency = st.slider("Frequency (number of purchases)", 1, 50, 10)
# monetary = st.slider("Monetary Value (â‚¹)", 100.0, 20000.0, 5000.0, step=100.0)
# tenure = st.slider("Tenure (days since first purchase)", 30, 2000, 365)
# 
# # Prepare input and predict
# input_data = np.array([[recency, frequency, monetary, tenure]])
# scaled_input = scaler.transform(input_data)
# predicted_cluster = kmeans_model.predict(scaled_input)[0]
# 
# # Output result
# st.subheader("ðŸ§© Assigned Customer Segment:")
# st.success(f"Segment {predicted_cluster}")
# !streamlit run app.py & npx localtunnel --port 8501
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from sklearn.preprocessing import StandardScaler
# from sklearn.cluster import KMeans
# 
# # Load model/data
# @st.cache_data
# def load_model_and_data():
#     data = pd.read_csv("customer_data.csv")
#     scaler = StandardScaler()
#     X_scaled = scaler.fit_transform(data)
#     model = KMeans(n_clusters=4, random_state=42)
#     model.fit(X_scaled)
#     return scaler, model, data
# 
# scaler, kmeans_model, df_data = load_model_and_data()
# 
# # UI Inputs
# st.title("ðŸ§  Customer Segmentation App")
# st.write("Input customer behavior data to determine segment")
# 
# recency = st.slider("Recency (days since last purchase)", 1, 365, 90)
# frequency = st.slider("Frequency (number of purchases)", 1, 50, 10)
# monetary = st.slider("Monetary Value (Â£)", 100.0, 20000.0, 5000.0, 100.0)
# tenure = st.slider("Tenure (days since first purchase)", 30, 2000, 365)
# 
# # Prediction
# input_data = np.array([[recency, frequency, monetary, tenure]])
# scaled_input = scaler.transform(input_data)
# predicted_cluster = kmeans_model.predict(scaled_input)[0]
# 
# st.subheader("ðŸ§© Assigned Cluster:")
# st.success(f"Customer belongs to Segment {predicted_cluster}")
# 
# st.subheader("ðŸ“Š Data Overview:")
# st.write(df_data.head())
# 
# st.subheader("Cluster Distribution:")
# cluster_counts = df_data['cluster'].value_counts().sort_index()
# st.bar_chart(cluster_counts)

!streamlit run app.py & npx localtunnel --port 8501